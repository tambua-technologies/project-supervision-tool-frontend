import { Row, Col, Spin } from "antd";
import React, { useEffect, useState } from "react";
import { useHistory, Link } from "react-router-dom";
import TopSummary from "../../../components/TopSummary";
import ProgressBarOverview from "../../../components/ProgressBar";
import "./styles.css";
import API from "../../../../API";
import { isoDateToHumanReadableDate } from "../../../../Util";
import { LoadingOutlined } from "@ant-design/icons";
import ActionBar from "../../../components/ActionBar";
import LatestReports from "../../../components/TableComponent";

import TableContainer from "../../../components/TableContainer";

const ProcuringEntity = (props) => {
  const [physicalProgress, setPysicalProgress] = useState([]);
  const [financialProgress, setFinancialProgress] = useState([]);
  const [summaries, setSummaries] = useState([]);
  const [reports, setReports] = useState([]);

  const {
    match: { url },
    setCurrentMenu,
  } = props;
  const allReportsUrl = url.replace("overview", "reports");
  const addFieldUrl = url.replace("overview", "field-notes");
  const createReportFormUrl = `${allReportsUrl}/create`;
  const fieldNoteUrl = `${addFieldUrl}/create`;
  const history = useHistory();

  useEffect(() => {
    const { procuringEntityId } = props.match.params;
    API.getProcuringEntitiesStatistics(procuringEntityId)
      .then((res) => {
        const physicalProgress = res.data.package_progress.map((p) => ({
          name: p.package_name,
          complete: p.actual_physical_progress,
        }));
        const financialProgress = res.data.package_progress.map((p) => ({
          name: p.package_name,
          complete: p.actual_financial_progress,
        }));
        const statisticsSummaries = [
          { label: "Packages", value: res.data.packages },
          { label: "Sub Projects", value: res.data.subProjects },
          { label: "Contractors", value: res.data.contractors },
          {
            label:
              res.data.reports?.length > 0
                ? isoDateToHumanReadableDate(res.data.reports[0].created_at)
                : null,
            value: "Latest Report",
            cardType: "date",
          },
        ];
        let dataArr = res.data.reports;
        console.log(dataArr);
        const result = dataArr.map((repo) =>
          repo.start.length > 0
            ? {
                ...repo,
                generatedBy: "N/A",
                period: `${isoDateToHumanReadableDate(
                  repo.start
                )} - ${isoDateToHumanReadableDate(repo.end)}`,
                updated_at: isoDateToHumanReadableDate(repo.updated_at),
              }
            : "N/A"
        );
        console.log(result);
        console.log(dataArr.reports);
        setReports(result);
        setFinancialProgress(financialProgress);
        setPysicalProgress(physicalProgress);
        setSummaries(statisticsSummaries);
      })
      .catch((err) => console.log(err));
  }, []);
  console.log(reports);

  // setReports(result);
  console.log(reports);

  const headings = [
    { title: "Title", key: "report_title", avatar: true },
    { title: "Report Period", key: "period" },
    { title: "Generated by", key: "generatedBy" },
    { title: "Last Update", key: "updated_at" },
  ];

  const antIcon = (
    <LoadingOutlined
      style={{
        fontSize: 54,
      }}
      spin
    />
  );

  return summaries.length > 0 ? (
    <div className="ProcuringEntity">
      <ActionBar
        actionButtonProp={{
          title: "Overview",
          arrActions: [
            {
              btnName: "Add Field Note ",
              btnAction: () => history.push(fieldNoteUrl),
            },
            {
              btnName: "New Monthly Report ",
              btnAction: () => history.push(createReportFormUrl),
            },
          ],
        }}
      />
      <TopSummary summaries={summaries} />
      <div
        style={{
          backgroundColor: "#f5f5f5",
          marginBottom: "20px",
          padding: "10px",
        }}
      >
        <h3>Latest Reports</h3>
        <TableContainer tableData={reports} titles={headings} />
        <div
          className="list-footer "
          style={{
            display: "flex",
            justifyContent: "flex-end",
          }}
        >
          <Link to={allReportsUrl} style={{ textDecoration: "underline" }}>
            View All Reports
          </Link>
        </div>
      </div>

      {/* <LatestReports
        reports={reports}
        allReportsUrl={allReportsUrl}
        setCurrentMenu={setCurrentMenu}
      /> */}
      <section className="ProcuringEntity-progress">
        <Row gutter={16}>
          <Col xxl={12} xl={12} lg={12} md={24} sm={24} xs={24}>
            <ProgressBarOverview
              title="Actual Physical Progress (%)"
              item={physicalProgress}
              bgcolor={"#286b6b"}
            />
          </Col>

          <Col xxl={12} xl={12} lg={12} md={24} sm={24} xs={24}>
            <ProgressBarOverview
              title="Financial Progress (%)"
              item={financialProgress}
              bgcolor={"#0f6788"}
            />
          </Col>
        </Row>
      </section>
    </div>
  ) : (
    <Spin
      style={{
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        height: "100vh",
      }}
      indicator={antIcon}
    />
  );
};

export default ProcuringEntity;
